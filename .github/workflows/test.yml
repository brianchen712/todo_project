name: Run Tests (Flask + Selenium + pytest)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: "YourStrong!Passw0rd"
          ACCEPT_EULA: "Y"
          MSSQL_COLLATION: "Chinese_Taiwan_Stroke_CI_AS"
        ports:
          - 1433:1433

    steps:
    # Checkout 程式碼
    - name: Checkout source
      uses: actions/checkout@v3

    # 安裝 Python 3.11
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # 安裝 ODBC 驅動與 MSSQL 工具，安裝必要的驅動與命令列工具，才能使用 sqlcmd 或 pyodbc 連 MSSQL
    - name: Install ODBC Driver and MSSQL Tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    # 安裝套件（含 pyodbc）
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 設定 CI 用環境變數，config.py 會透過 os.environ.get(...) 自動讀取這些變數
    - name: Set environment variables for CI
      run: |
        echo "DB_USER=tester" >> $GITHUB_ENV
        echo "DB_PASSWORD=Qwer1234!" >> $GITHUB_ENV

    # 等待 MSSQL 完全啟動
    - name: Wait for MSSQL to be ready
      run: |
        export PATH="$PATH:/opt/mssql-tools/bin"
        for i in {1..30}; do
          sqlcmd -S localhost -U sa -P "YourStrong!Passw0rd" -Q "SELECT 1" && echo "MSSQL ready" && break
          echo "Waiting for MSSQL..."
          sleep 5
        done

    # 背景啟動 Flask 應用
    - name: Start Flask app in background
      env:
        FLASK_APP: app.py
        FLASK_ENV: production
      run: |
        nohup flask run --host=0.0.0.0 --port=5000 > flask.log 2>&1 &
        sleep 5
        tail -n 20 flask.log
    
    # 初始化資料庫結構與帳號
    - name: Initialize database
      run: python init_database.py

    # 建立資料表與測試帳號（用 SQLAlchemy）
    - name: Create DB tables and test user
      run: python init_data.py

    # 建立 screenshots 資料夾
    - name: Prepare screenshots folder
      run: mkdir -p screenshots

    # 執行測試（Selenium + pytest、requests + pytest）
    - name: Run pytest
      run: |
        pytest --html=report.html --self-contained-html --alluredir=allure-results

    # 產生 Allure HTML 報告
    - name: Generate Allure HTML report
      if: always()
      run: |
        pip install allure-pytest
        wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz
        tar -xvzf allure-2.27.0.tgz
        ./allure-2.27.0/bin/allure generate allure-results -o allure-report --clean

    # 發佈 Allure 報告到 GitHub Pages
    - name: Deploy Allure report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report

    # 上傳報告
    - name: Upload HTML report (artifact)
      uses: actions/upload-artifact@v4
      with:
        name: pytest-report
        path: report.html

    # 上傳結果
    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: allure-results

    # 上傳截圖
    - name: Upload screenshots (if any)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots
        path: screenshots/

    #如果失敗則輸出 flask.log
    - name: Output logs if failed
      if: failure()
      run: cat flask.log || echo "No log file"